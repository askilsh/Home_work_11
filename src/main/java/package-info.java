/*
 * Singleton:   Применён в классе Main - Чтобы обезопасить систему от одновременного использования и оставить
 * одну точку доступа
 * Factory:     Применён в классе Factory, вызывается из класса Facade в методе getPerson -
 * Применен вместе с Фасадом, чтобы разгрузить верхнеуровневый InputProcessor и перенести дублирующий код
 * по созданию экземпляров Дженериков и генерацию их параметров.
 * Builder:     Применён в классе HairBuilder, вызывается из класса AppearanceGenerator в методе buildResponse -
 * Применяется вместе с патерном "Мост" для того, чтобы заполнить тип с цветом волос и получить экземпляр.
 * Adapter:      Применён в классе FioAdapter, вызывается из класса Facade в методе getPerson -
 * Для того, чтобы привести все Генераторы к единому интерфейсу Generator и вызывать единый для всех
 * метод buildResponse() для получения определенного экземпляра.
 * Bridge:      Применён в классе Hair, вызывается из класса AppearanceGenerator из метода buildResponse -
 * Применяется вместе с патерном Билдер для того, чтобы не плодить лишние классы с типами волос, а вместо этого
 * добавить в поле класса Hair переменную с типом волос.
 * Facade:      Применён в классе Facade, вызывается из класса InputProcessor в методе processInput -
 * Применяется вместе с Factory, чтобы разгрузить более верхнеуровневый класс InputProcessor, которому останется
 * только вызывать создание экзепляра Person. Применяется вместе с Factory, куда опускаются объявление Дженериков
 * и генерация параметров.
 * DTO:         Применён в классе Fio объявляется в классе FioGenerator в методе getFio()  -
 * Используется для сокращения кода, чтобы не передавать по уровням фамилию, имя и отчество, а сразу объект ФИО
 * и распаковать в нужном месте в классе Person для вывода.
 * Шаблон:      Применён в классе AbstractFactory, является родителем для класса Factory -
 * Применяется для сохранения исходного алгоритма работы с данными Person для различных вариаций Factory.
 */